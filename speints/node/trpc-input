#!/usr/bin/env node
const { getProgramArgs } = require('./common/parse')
const { warn } = require('./common/logger')
const { getTrpcHttpInputBody, getTrpcHttpInputQuery } = require('./common/trpcInput')

const { scriptName, scriptArgCount, scriptArgs } = getProgramArgs()

if (scriptArgCount < 1) {
	console.log(`usage: ${scriptName} param1 [param2 [...paramN]]`)
	console.log(`  example: ${scriptName} pagination.type=forward pagination.first=10`)
	process.exit(1)
}

const params = {
	forEach: function (callback) {
		for (const key in this) {
			if (key === 'forEach') {
				continue
			}
			callback(this[key], key)
		}
	}
}

let fn = getTrpcHttpInputBody

scriptArgs.forEach((arg) => {
	switch (arg) {
		case '-q':
		case '--query':
			fn = getTrpcHttpInputQuery
			return
		case '-m':
		case '--mutation':
			fn = getTrpcHttpInputBody
			return
		default:
			break
	}

	const [key, ...values] = arg.split('=')
	if (!values.length) {
		warn(`invalid argument '${arg}'; ignoring...`)
		return
	}
	params[key] = values.join('=')
})

console.log(fn(params))
