#!/bin/sh

which node >/dev/null 2>&1 || {
	echo 'Node.js must be installed' >&2
	exit 1
}

[ -n "$1" ] || {
	echo "usage: $(basename "$0") /path/to/outdir"
	exit 1
}

log() { printf '\033[1;39m%s\033[0;39m\n' "$1"; }

PROJ_DIR="$1"
PROJ_NAME=$(basename "$PROJ_DIR")

# Create project directory
[ -d "$PROJ_DIR" ] || mkdir "$PROJ_DIR"
cd "$PROJ_DIR"

# Init npm project
log "Init $PROJ_NAME"
npm init -y

# Install dependencies
log 'Install dependencies'
npm install -D typescript ts-node @types/node mocha @types/mocha eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
echo

# Create tsconfig.json
log 'Create tsconfig.json'
npx tsc --init --rootDir src --outDir dist \
	--esModuleInterop --resolveJsonModule --lib es6 --target es6 \
	--module commonjs --allowJs true --noImplicitAny true --declaration true

# Setup tsconfig.json
log 'Setup tsconfig.json'
sed -i '' '/^[\t ]*\/[/*]/d' tsconfig.json

tsconfigHead=$(head -n $(( $(wc -l < tsconfig.json) - 2 )) tsconfig.json)
cat > tsconfig.json << EOF
$tsconfigHead
	},
	"exclude": [
	"dist",
	"test",
	"coverage"
	]
}
EOF
unset tsconfigHead

# Setup package.json scripts
log 'Setup package.json'

# Setup main and dist
sed -i '' 's/\("main": \)\(.*\)$/\1"dist\/index.js",/' package.json
sed -i '' 's/\([\t ]*\)\("main": .*\)$/\1\2\'$'\n''\1"types": "dist\/index.d.ts",/' package.json

# Setup scripts
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"lint": "eslint src --ext .ts",/' package.json
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"build": "tsc",/' package.json
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"clean": "rm -rf build",/' package.json

# Setup magic scripts
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"postversion": "git push \&\& git push --tags",/' package.json
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"version": "git add -A src",/' package.json
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"preversion": "npm run lint",/' package.json
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"prepublishOnly": "npm test \&\& npm run lint",/' package.json
sed -i '' 's/\([\t ]*\)\("scripts": {\)/\1\2\'$'\n''\1\1"prepare": "npm run build",/' package.json

# Setup test script
sed -i '' "s/\(\"test\": \)\(.*\)$/\1\"env TS_NODE_COMPILER_OPTIONS='{ \\\\\"module\\\\\": \\\\\"commonjs\\\\\" }' mocha -r ts-node\/register\/transpile-only 'test\/\*\*\/\*.test.ts'\"/" package.json

# Setup eslint
log 'Setup .eslintrc.json'
cat > .eslintrc.json << EOF
{
	"root": true,
	"parser": "@typescript-eslint/parser",
	"plugins": ["@typescript-eslint"],
	"extends": [
		"plugin:@typescript-eslint/eslint-recommended",
		"plugin:@typescript-eslint/recommended"
	],
	"rules": {
		"@typescript-eslint/no-explicit-any": "off",
		"@typescript-eslint/no-empty-interface": "off",
		"@typescript-eslint/no-unused-vars": "warn",
		"@typescript-eslint/no-non-null-assertion": "off"
	}
}
EOF
echo

# Create Hello World Source
log 'Create source'
mkdir src
cat > src/index.ts << EOF
//
// index.ts
// $PROJ_NAME
//
// Created by $USER on DD/MM/YYYY.
//

export function sayHello(word: string, say = true): string {
	const rc = \`Hello, \${word}!\`
	if (say)
		console.log(rc)
	return rc
}
EOF

# Create Hello World Test
log 'Create test'
mkdir test
cat > test/helloworld.test.ts << EOF
//
// helloworld.test.ts
// $PROJ_NAME
//
// Created by $USER on DD/MM/YYYY.
//

import assert from 'assert'
import { sayHello } from '../src/index'

describe("Hello World Test", () => {

	it("asserting sayHello", () => {
		const msg = sayHello("bar", false)
		assert.strictEqual(msg, "Hello, bar!")
	})

})
EOF
echo

# .gitignore
log "Setup .gitignore"
cat > .gitignore << EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# TypeScript build (transpiled code)
/build/
/dist/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test
/.vscode

# macOS Stuff
.DS_Store

# Docker
.docker
EOF
