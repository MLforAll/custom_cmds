#!/bin/bash

crecdepth=0
updall_dir()
{
	local should_disp=1
	local did_pull=0

	local disp_dir="$1"
	local recbrowse="$2"
	local max_recdepth="$3"; [ ! -z "$max_recdepth" ] || max_recdepth=-1

	[ "$disp_dir" != '.' ] || disp_dir=$(pwd)

	# For Recursive
	(( crecdepth++ ))
	local dirs=()

	for p in "$1"/*
	do
		[ ! -d "$p" ] || dirs+=("$p")
		[ -d "$p/.git" ] || continue

		if [ $should_disp -eq 1 ]
		then
			printf "\033[1;32m=> Open dir: $disp_dir\033[0;39m\n"
			should_disp=0
		fi

		echo "=> Updating project: $p"
		git -C "$p" pull
		git -C "$p" remote update origin --prune
		git -C "$p" submodule | sed 's/^ *//' | cut -d' ' -f2 | while read s
		do
			echo "   => Submodule $s"
			git -C "$p/$s" pull
		done
		did_pull=1
	done

	# If recursive mode is not enabled, we stop there
	[ "$recbrowse" = recursive ] || return $did_pull
	[ $crecdepth -ne $max_recdepth ] || return $did_pull

	# Loop thru all folders we saw that aren't git repos
	# Call ourselves one more time
	local recdidp=$did_pull
	for rec in "${dirs[@]}"
	do
		updall_dir "$rec" $recbrowse $max_recdepth
		recdidp=$?
	done

	if [ $should_disp -eq 0 ]
	then
		printf "\033[1;31m<= Close dir: $disp_dir\033[0;39m\n"
		[ $recdidp -eq 0 ] || echo
	fi

	return $did_pull
}

if [ "$1" = '-r' ]
then
	RECURSIVE=recursive
	shift
fi

if [ "$1" = '-d' ]
then
	RDEPTH="$2"
	shift 2
fi

STARTDIR="$1"
[ ! -z "$STARTDIR" ] || STARTDIR=.

updall_dir "$STARTDIR" $RECURSIVE $RDEPTH
