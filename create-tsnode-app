#!/bin/sh

which node >/dev/null 2>&1 || {
	echo 'Node.js must be installed' >&2
	exit 1
}

[ -n "$1" ] || {
	echo "usage: $(basename "$0") /path/to/outdir"
	exit 1
}

log() { printf '\033[1;39m%s\033[0;39m\n' "$1"; }

PROJ_DIR="$1"
PROJ_NAME=$(basename "$PROJ_DIR")

# Create project directory
[ -d "$PROJ_DIR" ] || mkdir "$PROJ_DIR"
cd "$PROJ_DIR"

# Init npm project
log "Init $PROJ_NAME"
npm init -y

# Install dependencies
log 'Install dependencies'
npm install -D typescript ts-node @types/node nodemon mocha @types/mocha eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
echo

# Create tsconfig.json
log 'Create tsconfig.json'
npx tsc --init --rootDir src --outDir build \
	--esModuleInterop --resolveJsonModule --lib es6 --target es6 \
	--module commonjs --allowJs true --noImplicitAny true

# Setup tsconfig.json
log 'Setup tsconfig.json'
sed -i '' '/^[\t ]*\/[/*]/d' tsconfig.json

tsconfigHead=$(head -n $(( $(wc -l < tsconfig.json) - 2 )) tsconfig.json)
cat > tsconfig.json << EOF
$tsconfigHead
	},
	"exclude": [
		"build",
		"test",
		"coverage"
	]
}
EOF
unset tsconfigHead

# Setup package.json scripts
log 'Setup package.json'
sed -i '' 's/\("main": \)\(.*\)$/\1"build\/index.js",/' package.json
npm set-script lint 'tsc --noEmit && eslint src --ext .ts'
npm set-script start:dev nodemon
npm set-script start:built 'node build/index.js'
npm set-script start 'npm run build && npm run start:built'
npm set-script build tsc
npm set-script build:dev 'tsc -w'
npm set-script clean 'rm -rf build'
npm set-script test "mocha 'test/**/*.test.ts'"

# Setup nodemon
log 'Setup nodemon.json'
cat > nodemon.json << EOF
{
	"watch": ["src"],
	"ext": ".ts,.js",
	"ignore": [],
	"exec": "ts-node -T --project tsconfig.json src/index.ts"
}
EOF

# Setup eslint
log 'Setup .eslintrc.json'
cat > .eslintrc.json << EOF
{
		"root": true,
		"parser": "@typescript-eslint/parser",
		"plugins": ["@typescript-eslint"],
		"extends": [
				"plugin:@typescript-eslint/eslint-recommended",
				"plugin:@typescript-eslint/recommended"
		],
		"rules": {
				"@typescript-eslint/no-explicit-any": "off",
				"@typescript-eslint/no-empty-interface": "off",
				"@typescript-eslint/no-unused-vars": "warn",
				"@typescript-eslint/no-non-null-assertion": "off"
		}
}
EOF

# Setup mocha
log 'Setup .mocharc.json'
cat > .mocharc.json << EOF
{
	"require": [
		"ts-node/register/transpile-only"
	]
}
EOF
echo

# Create Hello World Source
log 'Create source'
mkdir src
cat > src/index.ts << EOF
console.log("Hello, World!")
EOF

# Create Hello World Test
log 'Create test'
mkdir test
cat > test/helloworld.test.ts << EOF
import assert from 'assert'

describe("Hello World Test", () => {

	it("asserting true", () => {
		assert.strictEqual(true, true)
	})

})
EOF
echo

# Docker
log 'Setup Docker'

cat > .dockerignore << EOF
node_modules
Dockerfile
docker-compose.yml
README.md
coverage
build
EOF

cat > Dockerfile << EOF
FROM node:14.15.0-alpine
WORKDIR /app

# Create aria-app user
RUN adduser --disabled-password --home /app --no-create-home --shell `which nologin` app

# Copy files
COPY ./ .

# Permissions
RUN chown -R app:app .
RUN chmod -R 750 .

# Ensure everything else runs under app user/group
USER app:app

# Install dependencies
RUN npm install --silent

# Build TypeScript
RUN npm run build

# Expose port 8080
#EXPOSE 8080

# Entrypoint / Entrycommand
ENTRYPOINT ["npm", "run", "start:built"]
EOF

cat > docker-compose.yml << EOF
# Docker Compose file for create-tsnode-app
version: '3.8'

#x-shared_environment: &shared_environment
#    FOO: BAR

services:
	$PROJ_NAME:
		image: $PROJ_NAME:latest
		build: .
		#environment:
		#  <<: *shared_environment
		#ports:
		#  - '8080:8080'
EOF

# .gitignore
log "Setup .gitignore"
cat > .gitignore << EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# TypeScript build (transpiled code)
/build/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test
/.vscode

# macOS Stuff
.DS_Store

# Docker
.docker
EOF
